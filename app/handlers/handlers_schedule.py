"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
import asyncio

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.filters import Command
from datetime import datetime

# from app.schedule import schedule, full_schedule
from app.handlers.handlers_main import ScheduleStates

import app.keyboard as kb # –ò–º–ø–æ—Ä—Ç –∫–Ω–æ–ø–æ–∫
import json

# # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
# with open('schedule.json', 'r', encoding='utf-8') as f:
#     schedule_data = json.load(f)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
def load_schedule_from_file(file_path: str) -> dict:
    with open(file_path, 'r', encoding='utf-8') as file:
        schedule = json.load(file)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞
    return schedule

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
schedule_file_path = 'schedule.json'
schedule = load_schedule_from_file(schedule_file_path)

router = Router() # –ó–∞–º–µ–Ω–∞ dp

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"
@router.callback_query(F.data == "inline_week_schedule")
async def inline_week_schedule(call: CallbackQuery,  state: FSMContext):
    # keyboard = kb.keyboard_week_schedule
    await state.set_state(ScheduleStates.BACK_WEEK_SCHEDULE)
    await call.message.delete()
    await call.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:', reply_markup=kb.keyboard_week_schedule)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
@router.callback_query(F.data == "inline_today_schedule")
async def inline_today_schedule(call: CallbackQuery, state: FSMContext):
    await state.set_state(ScheduleStates.TODAY_SCHEDULE)
    await call.message.delete()
    await call.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:', reply_markup=kb.keyboard_today_schedule)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–ª–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
# @router.callback_query(F.data.in_({"christian_theology", "islamic_theology"}))
# async def send_full_schedule(call: CallbackQuery, state: FSMContext):
#     group = call.data  # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ callback_data
#     schedule_text = full_schedule.get(group, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
#
#     # keyboard = kb.keyboard_back
#     await state.set_state(ScheduleStates.BACK_WEEK_SCHEDULE)
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
#     await call.message.answer(f"–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã:\n{schedule_text}", reply_markup=kb.keyboard_back)
#     await call.answer()
#     # –ò–º–∏—Ç–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
#     await call.message.edit_text("–û—Ç–∫—Ä—ã–≤–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é...")  # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "..."
#     await asyncio.sleep(1)  # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –≤ 1 —Å–µ–∫—É–Ω–¥—É
#
#     # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏)
#     await call.message.delete()
#
# def get_current_class(group: str):
#     now = datetime.now()
#     weekday = now.strftime('%A').lower()
#     if group in schedule and weekday in schedule[group]:
#         return f"–¢–µ–∫—É—â–∏–µ –∑–∞–Ω—è—Ç–∏—è: \n{schedule[group][weekday]}"
#     else:
#         return "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
@router.callback_query(lambda call: call.data in ["islamic_theology", "christian_theology"])
async def send_schedule(call: CallbackQuery, state: FSMContext):
    await state.set_state(ScheduleStates.BACK_WEEK_SCHEDULE)
    group = call.data  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    schedule_message = get_week_schedule(schedule, group)  # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    split_messages = split_long_message(schedule_message)

    for part in split_messages:
        await call.message.answer(part, parse_mode='HTML')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot.send_message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
def get_week_schedule(schedule: dict, group: str) -> str:
    group_schedule = schedule[group]
    if group == 'islamic_theology':
        message = f"üóì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –≥—Ä—É–ø–ø—ã <b>–ò—Å–ª–∞–º—Å–∫–∞—è —Ç–µ–æ–ª–æ–≥–∏—è</b>:\n\n"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    else:
        message = f"üóì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –≥—Ä—É–ø–ø—ã <b>–•—Ä–∏—Å—Ç–∏–∞–Ω—Å–∫–∞—è —Ç–µ–æ–ª–æ–≥–∏—è</b>:\n\n"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫

    for day, subjects in group_schedule.items():
        message += (f"______________________________"
                    f"\n‚≠êÔ∏è–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ - <b>{day}</b>:\n\n")  # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è

        if not subjects:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–Ω—è—Ç–∏—è
            message += "  –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π\n"
            continue

        for subject in subjects:
            subject_type = subject['–¢–∏–ø']
            time = subject['–í—Ä–µ–º—è']
            course = subject['–ü—Ä–µ–¥–º–µ—Ç']
            teacher = subject['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']
            building = subject['–ö–æ—Ä–ø—É—Å']
            floor = subject['–≠—Ç–∞–∂']
            room = subject['–ê—É–¥–∏—Ç–æ—Ä–∏—è']

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
            message += (
                f"     {time}"
                f"     <b>{course}</b>"
                f"     {teacher} - ({building}, {floor}, {room})\n"
            )
            # # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
            # message += (
            #     f"  ‚û§ *{subject_type}*\n"
            #     f"     üïí *–í—Ä–µ–º—è:* {time}\n"
            #     f"     üìö *–ü—Ä–µ–¥–º–µ—Ç:* {course}\n"
            #     f"     üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* {teacher}\n"
            #     f"     üè¢ *–ö–æ—Ä–ø—É—Å:* {building}, *–≠—Ç–∞–∂:* {floor}, *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {room}\n\n"
            # )

    return message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π
def split_long_message(message: str, max_length: int = 4096) -> list:
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
    if len(message) <= max_length:
        return [message]

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    parts = []
    while len(message) > max_length:
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –ª–∏–º–∏—Ç–æ–º
        split_at = message[:max_length].rfind('\n')
        if split_at == -1:
            split_at = max_length
        parts.append(message[:split_at])
        message = message[split_at:]

    parts.append(message)
    return parts

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —Ç–µ–∫—É—â–∏–º –∑–∞–Ω—è—Ç–∏–µ–º
# @router.callback_query(F.data.in_({"now_christian_theology", "now_islamic_theology"}))
# async def send_current_class_handler(callback: CallbackQuery, state: FSMContext):
#     group = callback.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ callback_data
#     group = 'christian_theology' if group == 'christian' else 'islamic_theology'  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
#
#     current_class = get_current_class(group)
#
#     await state.set_state(ScheduleStates.BACK_TODAY_SCHEDULE)
#     await callback.message.answer(current_class, reply_markup=kb.keyboard_back)
#     # await callback.message.answer(current_class)
#     await callback.answer()
#     # –ò–º–∏—Ç–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
#     await callback.message.edit_text("–û—Ç–∫—Ä—ã–≤–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")  # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "..."
#     await asyncio.sleep(1)  # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –≤ 1 —Å–µ–∫—É–Ω–¥—É
#
#     # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏)
#     await callback.message.delete()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == "btn_back")
async def back_button(call: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = await state.get_state()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if current_state == ScheduleStates.WEEK_SCHEDULE:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.set_state(ScheduleStates.MAIN_MENU)
        await call.message.delete()
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb.inline_main)

    elif current_state == ScheduleStates.TODAY_SCHEDULE:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.set_state(ScheduleStates.MAIN_MENU)
        await call.message.delete()
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb.inline_main)

    elif current_state == ScheduleStates.BACK_WEEK_SCHEDULE:
        await state.set_state(ScheduleStates.WEEK_SCHEDULE)
        await call.message.delete()
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb.keyboard_week_schedule)

    elif current_state == ScheduleStates.BACK_TODAY_SCHEDULE:
        await state.set_state(ScheduleStates.TODAY_SCHEDULE)
        await call.message.delete()
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb.keyboard_today_schedule)

